const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('electronAPI', {
  getConfig: () => ipcRenderer.invoke('get-config'),
  updateConfig: (config) => ipcRenderer.invoke('update-config', config),
  getAccounts: () => ipcRenderer.invoke('get-accounts'),
  getRecentActions: () => ipcRenderer.invoke('get-recent-actions'),
  getDetailedActions: () => ipcRenderer.invoke('get-detailed-actions'),
  getAIInteractions: () => ipcRenderer.invoke('get-ai-interactions'),
  getAutomationHistory: () => ipcRenderer.invoke('get-automation-history'),
  addEmailAccount: (emailData) => ipcRenderer.invokepreload('add-email-account', emailData),
  addOAuthAccount: () => ipcRenderer.invoke('add-oauth-account'),
  exchangeOAuthCode: (code) => ipcRenderer.invoke('exchange-oauth-code', code),
  removeAccount: (accountId) => ipcRenderer.invoke('remove-account', accountId),
  openExternal: (url) => ipcRenderer.invoke('open-external', url),
  getErrors: (limit, source) => ipcRenderer.invoke('get-errors', limit, source),
  clearErrors: () => ipcRenderer.invoke('clear-errors'),
  getErrorCount: () => ipcRenderer.invoke('get-error-count'),
  // Automation Agent APIs
  getPatterns: () => ipcRenderer.invoke('get-patterns'),
  generateAutomationPlan: (patternDescription) => ipcRenderer.invoke('generate-automation-plan', patternDescription),
  generateScript: (patternDescription) => ipcRenderer.invoke('generate-script', patternDescription),
  executeScript: (script, scriptName) => ipcRenderer.invoke('execute-script', script, scriptName),
  getExecutionHistory: () => ipcRenderer.invoke('get-execution-history'),
  // New Automation Workflow APIs
  getPendingSuggestions: () => ipcRenderer.invoke('get-pending-suggestions'),
  acceptSuggestion: (suggestionId) => ipcRenderer.invoke('accept-suggestion', suggestionId),
  rejectSuggestion: (suggestionId) => ipcRenderer.invoke('reject-suggestion', suggestionId),
  provideExplanation: (suggestionId, explanation) => ipcRenderer.invoke('provide-explanation', suggestionId, explanation),
  refineScript: (suggestionId, refinement) => ipcRenderer.invoke('refine-script', suggestionId, refinement),
  confirmAndExecute: (suggestionId) => ipcRenderer.invoke('confirm-and-execute', suggestionId),
  getExecutionStatus: (suggestionId) => ipcRenderer.invoke('get-execution-status', suggestionId),
  getAllSuggestions: () => ipcRenderer.invoke('get-all-suggestions'),
  getActionRegistryStats: () => ipcRenderer.invoke('get-action-registry-stats'),
  getActionRegistryAll: (limit) => ipcRenderer.invoke('get-action-registry-all', limit),
  getLongTermStatus: () => ipcRenderer.invoke('get-long-term-status'),
  getCursorPosition: () => ipcRenderer.invoke('get-cursor-position'),
  showAutomationPopup: (suggestion) => ipcRenderer.invoke('show-automation-popup', suggestion),
  onSuggestionAccepted: (callback) => ipcRenderer.on('suggestion-accepted', callback),
  onSuggestionRejected: (callback) => ipcRenderer.on('suggestion-rejected', callback),
  onSwitchToAutomation: (callback) => ipcRenderer.on('switch-to-automation', callback),
  getTimeSaved: () => ipcRenderer.invoke('get-time-saved'),
  getTimeSavedStats: () => ipcRenderer.invoke('get-time-saved-stats'),
  getCurrentActivity: () => ipcRenderer.invoke('get-current-activity'),
  // App Usage APIs
  getAppUsageToday: () => ipcRenderer.invoke('get-app-usage-today'),
  getAppUsageWeek: () => ipcRenderer.invoke('get-app-usage-week'),
  getAppUsageHourly: (date) => ipcRenderer.invoke('get-app-usage-hourly', date),
  getAppUsageStats: () => ipcRenderer.invoke('get-app-usage-stats'),
  // Long-term summarization APIs
  getMinuteSummaries: (limit) => ipcRenderer.invoke('get-minute-summaries', limit),
  getTenMinuteSummaries: (limit) => ipcRenderer.invoke('get-ten-minute-summaries', limit),
  deleteMinuteSummary: (summaryId) => ipcRenderer.invoke('delete-minute-summary', summaryId),
  deleteTenMinuteSummary: (summaryId) => ipcRenderer.invoke('delete-ten-minute-summary', summaryId),
  // Backend management APIs
  stopBackend: () => ipcRenderer.invoke('stop-backend'),
  isBackendRunning: () => ipcRenderer.invoke('is-backend-running'),
  // Backend status event listeners
  onBackendStatus: (callback) => ipcRenderer.on('backend-status', callback),
  onBackendError: (callback) => ipcRenderer.on('backend-error', callback),
  removeBackendStatusListener: (callback) => ipcRenderer.removeListener('backend-status', callback),
  removeBackendErrorListener: (callback) => ipcRenderer.removeListener('backend-error', callback),
  // Directory picker
  selectDirectory: () => ipcRenderer.invoke('select-directory'),
});
